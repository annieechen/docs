:skip-front-matter:

= Writing Problem: Analyze This

Questions? Feel free to head to https://www.reddit.com/r/cs50[CS50 on Reddit], http://cs50.stackexchange.com[CS50 on StackExchange], the `#cs50ap` channel on https://cs50x.slack.com[CS50x Slack] (after signing up), or the https://www.facebook.com/groups/cs50[CS50 Facebook group].

== Objectives

* Reflect on your experience

== Academic Honesty

This course's philosophy on academic honesty is best stated as "be reasonable." The course recognizes that interactions with classmates and others can facilitate mastery of the course's material. However, there remains a line between enlisting the help of another and submitting the work of another. This policy characterizes both sides of that line.

The essence of all work that you submit to this course must be your own. Collaboration on problems is not permitted (unless explicitly stated otherwise) except to the extent that you may ask classmates and others for help so long as that help does not reduce to another doing your work for you. Generally speaking, when asking for help, you may show your code or writing to others, but you may not view theirs, so long as you and they respect this policy's other constraints. Collaboration on quizzes and tests is not permitted at all. Collaboration on the final project is permitted to the extent prescribed by its specification.

Below are rules of thumb that (inexhaustively) characterize acts that the course considers reasonable and not reasonable. If in doubt as to whether some act is reasonable, do not commit it until you solicit and receive approval in writing from your instructor. If a violation of this policy is suspected and confirmed, your instructor reserves the right to impose local sanctions on top of any disciplinary outcome that may include an unsatisfactory or failing grade for work submitted or for the course itself.

=== Reasonable

* Communicating with classmates about problems in English (or some other spoken language).
* Discussing the course's material with others in order to understand it better.
* Helping a classmate identify a bug in his or her code, such as by viewing, compiling, or running his or her code, even on your own computer.
* Incorporating snippets of code that you find online or elsewhere into your own code, provided that those snippets are not themselves solutions to assigned problems and that you cite the snippets' origins.
* Reviewing past years' quizzes, tests, and solutions thereto.
* Sending or showing code that you've written to someone, possibly a classmate, so that he or she might help you identify and fix a bug.
* Sharing snippets of your own solutions to problems online so that others might help you identify and fix a bug or other issue.
* Turning to the web or elsewhere for instruction beyond the course's own, for references, and for solutions to technical difficulties, but not for outright solutions to problems or your own final project.
* Whiteboarding solutions to problems with others using diagrams or pseudocode but not actual code.
* Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your work for you.

=== Not Reasonable

* Accessing a solution to some problem prior to (re-)submitting your own.
* Asking a classmate to see his or her solution to a problem before (re-)submitting your own.
* Decompiling, deobfuscating, or disassembling the staff's solutions to problems.
* Failing to cite (as with comments) the origins of code, writing, or techniques that you discover outside of the course's own lessons and integrate into your own work, even while respecting this policy's other constraints.
* Giving or showing to a classmate a solution to a problem when it is he or she, and not you, who is struggling to solve it.
* Looking at another individual's work during a quiz or test.
* Paying or offering to pay an individual for work that you may submit as (part of) your own.
* Providing or making available solutions to problems to individuals who might take this course in the future.
* Searching for, soliciting, or viewing a quiz's questions or answers prior to taking the quiz.
* Searching for or soliciting outright solutions to problems online or elsewhere.
* Splitting a problem's workload with another individual and combining your work (unless explicitly authorized by the problem itself).
* Submitting (after possibly modifying) the work of another individual beyond allowed snippets.
* Submitting the same or similar work to this course that you have submitted or will submit to another.
* Using resources during a quiz beyond those explicitly allowed in the quiz's instructions.
* Viewing another's solution to a problem and basing your own solution on it.

== Assessment

Your work on this writing problem will be evaluated along three axes primarily.

Scope::
    To what extent does your submission align with the requirements of the specification?
Correctness::
    To what extent is your submission correct and free of factual errors?
Style::
    To what extent is your submission readable (i.e., thoughtfully organized, coherent, words properly spelled)?


To obtain a passing grade in this course, all students must ordinarily submit all assigned problems unless granted an exception in writing by the instructor.

== So Meta

[quote,Upchurch & Sims-Knight, Reflective Essays in Software Engineering (1999)]
____
The acquisition of expertise (a) takes a long time to develop, (b) takes intense, focused effort on the part of the individual, and (c) resists direct tuition. Ten years of exposure to a field appears to be a necessary, but not sufficient condition for the development of expertise. The number of years of experience is a weak predictor of performance. Practice alone is sufficient to develop a certain level of competence, but, for most people, will not result in true excellence. Deliberate practice, defined as practice in order to improve, has been suggested as the key to increasing competence. In many studies, the critical variable was not the amount of time engaged in the activity, rather it was practice with the intent of figuring out how to get better.
____

Odds are, particularly if you find yourself among those less comfortable and this is your first course in computer science, you've made a remarkable amount of progress as a programmer, perhaps much moreso than you predicted. But as the above quote illlustrates, merely knowing how to write code does not a good programmer make. Many members of the CS50 staff have been programming for upwards of ten years, and as any of them will quickly tell you, their learning never ceases. There is always an opportunity for growth and improvement, and often times the largest amounts of growth and improvement come from taking the time for some self-reflection.

In this writing problem, we want to provide you with a structured opportunity to perform some of this self-reflection. There are no wrong or right answers to any portion of this problem; rather, the most important thing is that you analyze your own experiences in CS50 AP over the last several weeks or months with a critical eye.

In 500-1,000 words, prepare an essay on your experience, expectations, growths, triumphs, and struggles up through this point in the course. You can spend as much time as you feel is appropriate on each of these questions, but over the course of your writing you should touch on at least the following topics:

* Discuss your initial expectations of this course, and about how the course has either aligned with or deviated from these expectations.
* Write about at least one programming problem and at least one writing problem that you enjoyed or did not enjoy. What specifically about that problem did you enjoy or not enjoy, and why do you feel that way?
* Explain how your habits as a computer scientist have evolved. How do you do things differently at this point in the course from how you did the same things in Unit 1? For instance, has your debugging strategy changed? Do you find yourself more intuitively counting from 0 instead of 1? Do you find that some of what you've learned in this course has extended to other domains of interest to you? How?
* Do you feel you learn the most from watching videos, reading excerpts, reviewing slides, hearing audio, or some amalgam of these? Why do you think that is?
* Explain how you expect your habits as a computer scientist and programmer to evolve further as you proceed through the course.
* Touch on an "a-ha!" moment that you encountered in the course; a moment when suddenly a concept that you struggled with made sense. If you have yet to encounter or experience such a moment, discuss why.
* Talk about each of these with a classmate, and compare notes. How have your experiences differed and how have they aligned?

This metacognitive assessment is but one step in not necessarily becoming a better programmer or a better computer scientist, but really becoming a better learner. The better you understand your thought process, the easier it becomes to determine how to best understand something that may initially confound you. Once you've figured that out, your horizons can expand infinitely.

This was Analyze This.
