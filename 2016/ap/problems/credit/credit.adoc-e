:skip-front-matter:

= Problem: Credit
:hacker:

== Objectives

* Use algorithms to solve a problem.
* Analyze the pros and cons of different designs.
* Learn about real-world encoding phenomena.

== Recommended Reading

* Pages 1 – 7, 9, and 10 of http://www.howstuffworks.com/c.htm.
* Chapters 1 – 6 of *Programming in C*.

== Academic Honesty

This course's philosophy on academic honesty is best stated as "be reasonable." The course recognizes that interactions with classmates and others can facilitate mastery of the course's material. However, there remains a line between enlisting the help of another and submitting the work of another. This policy characterizes both sides of that line.

The essence of all work that you submit to this course must be your own. Collaboration on problems is not permitted (unless explicitly stated otherwise) except to the extent that you may ask classmates and others for help so long as that help does not reduce to another doing your work for you. Generally speaking, when asking for help, you may show your code or writing to others, but you may not view theirs, so long as you and they respect this policy's other constraints. Collaboration on quizzes and tests is not permitted at all. Collaboration on the final project is permitted to the extent prescribed by its specification.

Below are rules of thumb that (inexhaustively) characterize acts that the course considers reasonable and not reasonable. If in doubt as to whether some act is reasonable, do not commit it until you solicit and receive approval in writing from your instructor. If a violation of this policy is suspected and confirmed, your instructor reserves the right to impose local sanctions on top of any disciplinary outcome that may include an unsatisfactory or failing grade for work submitted or for the course itself.

=== Reasonable

* Communicating with classmates about problems in English (or some other spoken language).
* Discussing the course's material with others in order to understand it better.
* Helping a classmate identify a bug in his or her code, such as by viewing, compiling, or running his or her code, even on your own computer.
* Incorporating snippets of code that you find online or elsewhere into your own code, provided that those snippets are not themselves solutions to assigned problems and that you cite the snippets' origins.
* Reviewing past years' quizzes, tests, and solutions thereto.
* Sending or showing code that you've written to someone, possibly a classmate, so that he or she might help you identify and fix a bug.
* Sharing snippets of your own solutions to problems online so that others might help you identify and fix a bug or other issue.
* Turning to the web or elsewhere for instruction beyond the course's own, for references, and for solutions to technical difficulties, but not for outright solutions to problems or your own final project.
* Whiteboarding solutions to problems with others using diagrams or pseudocode but not actual code.
* Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your work for you.

=== Not Reasonable

* Accessing a solution to some problem prior to (re-)submitting your own.
* Asking a classmate to see his or her solution to a problem before (re-)submitting your own.
* Decompiling, deobfuscating, or disassembling the staff's solutions to problems.
* Failing to cite (as with comments) the origins of code, writing, or techniques that you discover outside of the course's own lessons and integrate into your own work, even while respecting this policy's other constraints.
* Giving or showing to a classmate a solution to a problem when it is he or she, and not you, who is struggling to solve it.
* Looking at another individual's work during a quiz or test.
* Paying or offering to pay an individual for work that you may submit as (part of) your own.
* Providing or making available solutions to problems to individuals who might take this course in the future.
* Searching for, soliciting, or viewing a quiz's questions or answers prior to taking the quiz.
* Searching for or soliciting outright solutions to problems online or elsewhere.
* Splitting a problem's workload with another individual and combining your work (unless explicitly authorized by the problem itself).
* Submitting (after possibly modifying) the work of another individual beyond allowed snippets.
* Submitting the same or similar work to this course that you have submitted or will submit to another.
* Using resources during a quiz beyond those explicitly allowed in the quiz's instructions.
* Viewing another's solution to a problem and basing your own solution on it.


== Assessment

Your work on this problem set will be evaluated along four axes primarily.

Scope::
  To what extent does your code implement the features required by our specification?
Correctness::
  To what extent is your code consistent with our specifications and free of bugs?
Design::
  To what extent is your code written well (i.e., clearly, efficiently, elegantly, and/or logically)?
Style::
  To what extent is your code readable (i.e., commented and indented with variables aptly named)?

All students, whether or not taking the course for a letter grade, must ordinarily submit this and all other problem sets to be eligible for a satisfactory grade unless granted an exception in writing by the course's heads.


== Bad Credit

Odds are someone you know has a credit card in their wallet.  That card has a number, both printed on its face and embedded (perhaps with some other data) in the magnetic stripe on back.  That number is also stored in a database somewhere, so that when the card is used to buy something, the creditor knows whom to bill.  There are a lot of people with credit cards in this world, so those numbers are pretty long: American Express uses 15-digit numbers, MasterCard uses 16-digit numbers, and Visa uses 13- and 16-digit numbers.  And those are decimal numbers (0 through 9), not binary, which means, for instance, that American Express could print as many as 10^(15) = 1,000,000,000,000,000 unique cards!  (That's, ahem, a quadrillion.)

Now that's a bit of an exaggeration, because credit card numbers actually have some structure to them.  American Express numbers all start with 34 or 37; MasterCard numbers all start with 51, 52, 53, 54, or 55; and Visa numbers all start with 4.  But credit card numbers also have a "checksum" built into them, a mathematical relationship between at least one number and others.  That checksum enables computers (or humans who like math) to detect typos (e.g., transpositions), if not fraudulent numbers, without having to query a database, which can be slow.  (Consider the awkward silence you may have experienced at some point whilst paying by credit card at a store whose computer uses a dial-up modem to verify your card.)  Of course, a dishonest mathematician could certainly craft a fake number that nonetheless respects the mathematical constraint, so a database lookup is still necessary for more rigorous checks.

So what's the secret formula?  Well, most cards use an algorithm invented by Hans Peter Luhn, a nice fellow from IBM.  According to Luhn's algorithm, you can determine if a credit card number is (syntactically) valid as follows:

. Multiply every other digit by 2, starting with the number's second-to-last digit, and then add those products' digits together.
. Add the sum to the sum of the digits that weren't multiplied by 2.
. If the total's last digit is 0 (or, put more formally, if the total modulo 10 is congruent to 0), the number is valid!

That's kind of confusing, so let's try an example with Daven's AmEx: 378282246310005.

. For the sake of discussion, let's first underline every other digit, starting with the number's second-to-last digit:
+
3[underline]##7##8[underline]##2##8[underline]##2##2[underline]##4##6[underline]##3##1[underline]##0##0[underline]##0##5
+
Okay, let's multiply each of the underlined digits by 2:
+
7•2 + 2•2 + 2•2 + 4•2 + 3•2 + 0•2 + 0•2
+
That gives us:
+
14 + 4 + 4 + 8 + 6 + 0 + 0
+
Now let's add those products' digits (i.e., not the products themselves) together:
+
1 + 4 + 4 + 4 + 8 + 6 + 0 + 0 = 27
. Now let's add that sum (27) to the sum of the digits that weren't multiplied by 2:
+
27 + 3 + 8 + 8 + 2 + 6 + 1 + 0 + 5 = 60
. Yup, the last digit in that sum (60) is a 0, so Daven's card is legit!

So, validating credit card numbers isn't hard, but it does get a bit tedious by hand.  Let's write a program.

In `credit.c`, write a program that prompts the user for a credit card number and then reports (via `printf`) whether it is a valid American Express, MasterCard, or Visa card number, per the definitions of each's format herein.  So that we can automate some tests of your code, we ask that your program's last line of output be `AMEX\n` or `MASTERCARD\n` or `VISA\n` or `INVALID\n`, nothing more, nothing less, and that `main` always return `0`.  For simplicity, you may assume that the user's input will be entirely numeric (i.e., devoid of hyphens, as might be printed on an actual card).  But do not assume that the user's input will fit in an `int`!

One option (although not necessarily the only option!) is to use `GetLongLong` from CS50's library to get users' input.  (Why?)

Of course, to use `GetLongLong`, you'll need to tell `clang` about CS50's library.  Be sure to put

[source,c]
----
#include <cs50.h>
----

toward the top of `credit.c`.  And be sure to compile your code with a command like the below.

[source,bash]
----
clang -o credit credit.c -lcs50
----

Note that `-lcs50` must come at this command's end because of how clang works.

Incidentally, recall that `make` can invoke `clang` for you and provide that flag for you, as via the command below.

[source,bash]
----
make credit
----

Assuming your program compiled without errors (or, ideally, warnings) via either command, you can run your program with the command below.

[source,bash]
----
./credit
----

Consider the below representative of how your own program should behave when passed a valid credit card number (sans hyphens), wherein underlined text represents some user's input.

[source,subs=quotes]
----
~/workspace/chapter1 $ [underline]#./credit#
Number: [underline]#378282246310005#
AMEX
----

Of course, `GetLongLong` itself will reject hyphens (and more) anyway:

[source,subs=quotes]
----
~/workspace/chapter1 $ [underline]#./credit#
Number: [underline]#3782-822-463-10005#
Retry: [underline]#foo#
Retry: [underline]#378282246310005#
AMEX
----

But it's up to you to catch inputs that are not credit card numbers, even if numeric:

[source,subs=quotes]
----
~/workspace/chapter1 $ [underline]#./credit#
Number: [underline]#74605328941#
INVALID
----

Test out your program with a whole bunch of inputs, both valid and invalid.  (We certainly will!)  Here are a few card numbers that PayPal recommends for testing:

https://www.paypalobjects.com/en_US/vhelp/paypalmanager_help/credit_card_numbers.htm

Google (or perhaps a parent's wallet) should turn up more.  (If your parent asks what you're doing, don't mention us.)  If your program behaves incorrectly on some inputs (or doesn't compile at all), time to debug!

If you'd like to check the correctness of your program with `check50`, you may execute the below.

[source,bash]
----
check50 1617.chapter1.credit credit.c
----

And if you'd like to play with the staff's own implementation of `credit` within CS50 IDE, you may execute the below.

[source,bash]
----
~cs50/chapter1/credit
----

This was Credit.
