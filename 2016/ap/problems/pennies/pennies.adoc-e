:skip-front-matter:

= Problem: Pennies

Questions? Feel free to head to https://www.reddit.com/r/cs50[CS50 on Reddit], http://cs50.stackexchange.com[CS50 on StackExchange], or the https://www.facebook.com/groups/cs50[CS50 Facebook group].

== Objectives

* Use algorithms to solve problems.
* See firsthand the power of exponentiation.
* Explore some of the other header files available to you.

== Recommended Reading

* Pages 1 – 7, 9, and 10 of http://www.howstuffworks.com/c.htm.
// TODO
* Chapters 1 – 5, 9, and 11 &#8211; 17 of _Absolute Beginner's Guide to C_.
* Chapters 1 – 6 of _Programming in C_.

== Academic Honesty

This course's philosophy on academic honesty is best stated as "be reasonable." The course recognizes that interactions with classmates and others can facilitate mastery of the course's material. However, there remains a line between enlisting the help of another and submitting the work of another. This policy characterizes both sides of that line.

The essence of all work that you submit to this course must be your own. Collaboration on problems is not permitted (unless explicitly stated otherwise) except to the extent that you may ask classmates and others for help so long as that help does not reduce to another doing your work for you. Generally speaking, when asking for help, you may show your code or writing to others, but you may not view theirs, so long as you and they respect this policy's other constraints. Collaboration on quizzes and tests is not permitted at all. Collaboration on the final project is permitted to the extent prescribed by its specification.

Below are rules of thumb that (inexhaustively) characterize acts that the course considers reasonable and not reasonable. If in doubt as to whether some act is reasonable, do not commit it until you solicit and receive approval in writing from your instructor. If a violation of this policy is suspected and confirmed, your instructor reserves the right to impose local sanctions on top of any disciplinary outcome that may include an unsatisfactory or failing grade for work submitted or for the course itself.

=== Reasonable

* Communicating with classmates about problems in English (or some other spoken language).
* Discussing the course's material with others in order to understand it better.
* Helping a classmate identify a bug in his or her code, such as by viewing, compiling, or running his or her code, even on your own computer.
* Incorporating snippets of code that you find online or elsewhere into your own code, provided that those snippets are not themselves solutions to assigned problems and that you cite the snippets' origins.
* Reviewing past years' quizzes, tests, and solutions thereto.
* Sending or showing code that you've written to someone, possibly a classmate, so that he or she might help you identify and fix a bug.
* Sharing snippets of your own solutions to problems online so that others might help you identify and fix a bug or other issue.
* Turning to the web or elsewhere for instruction beyond the course's own, for references, and for solutions to technical difficulties, but not for outright solutions to problems or your own final project.
* Whiteboarding solutions to problems with others using diagrams or pseudocode but not actual code.
* Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your work for you.

=== Not Reasonable

* Accessing a solution to some problem prior to (re-)submitting your own.
* Asking a classmate to see his or her solution to a problem before (re-)submitting your own.
* Decompiling, deobfuscating, or disassembling the staff's solutions to problems.
* Failing to cite (as with comments) the origins of code, writing, or techniques that you discover outside of the course's own lessons and integrate into your own work, even while respecting this policy's other constraints.
* Giving or showing to a classmate a solution to a problem when it is he or she, and not you, who is struggling to solve it.
* Looking at another individual's work during a quiz or test.
* Paying or offering to pay an individual for work that you may submit as (part of) your own.
* Providing or making available solutions to problems to individuals who might take this course in the future.
* Searching for, soliciting, or viewing a quiz's questions or answers prior to taking the quiz.
* Searching for or soliciting outright solutions to problems online or elsewhere.
* Splitting a problem's workload with another individual and combining your work (unless explicitly authorized by the problem itself).
* Submitting (after possibly modifying) the work of another individual beyond allowed snippets.
* Submitting the same or similar work to this course that you have submitted or will submit to another.
* Using resources during a quiz beyond those explicitly allowed in the quiz's instructions.
* Viewing another's solution to a problem and basing your own solution on it.

== Assessment

Your work on this problem set will be evaluated along four axes primarily.

Scope::
 To what extent does your code implement the features required by our specification?
Correctness::
 To what extent is your code consistent with our specifications and free of bugs?
Design::
 To what extent is your code written well (i.e., clearly, efficiently, elegantly, and/or logically)?
Style::
 To what extent is your code readable (i.e., commented and indented with variables aptly named)?

To obtain a passing grade in this course, all students must ordinarily submit all assigned problems unless granted an exception in writing by the instructor.

== Double or Nothing

If ever given the choice between $10,000,000 or a month's worth of pennies, whereby you receive a penny the first day, two pennies the second, four pennies the third, and so forth... take the penniesfootnote:[By contrast, if you receive an email from some stranger on the Internet offering you an opportunity to double your money, maybe think twice.].

Anyhow, why the pennies? Exponentiation. Those pennies add up Consider how many pennies you'd receive on the 31st day alone, not to mention on the days leading up to it:

[source,bash]
----
1 × 2 × 2 × 2 × 2 × 2 × 2 × 2 × 2 × 2 × 2
  × 2 × 2 × 2 × 2 × 2 × 2 × 2 × 2 × 2 × 2
  × 2 × 2 × 2 × 2 × 2 × 2 × 2 × 2 × 2 × 2

  = 1073741824
----

Put more succinctly, that's 1 × 2^30^. Convert those pennies to dollars (by dividing by 100) and you get, what, over $10,000,000? On just that day? Crazy.

What if you were given more than one penny on that first day? Or the month were February, in which case you'd get shortchanged a few million? (Best to take the pennies in January, March, May, July, August, October, or Decemberfootnote:[We'll admit it. We had to look at a calendar.].) Let's find out.

Implement, in a file called `pennies.c`, a program that first asks the user how many days there are in the month and then asks the user how many pennies he or she will receive on the first day of that month. The program should then calculate the amount that the user will have received **in total** by the end of the month (not just on the last day) if that amount is doubled on every day but the first, expressed not as pennies but as dollars and cents. If the user does not type in 28, 29, 30, or 31 for the number of days in the month, the program should prompt the user to retry. If the user does not input a positive integer for the first day's number of pennies, the program should prompt the user to retry.

For instance, your program might behave as follows, whereby underlined text represents some user's input.

[source,subs=quotes]
----
~/workspace/chapter1 $ [underline]#./pennies#
Days in month: [underline]#32#
Days in month: [underline]#31#
Pennies on first day: [underline]#1#
$21474836.47
----

Notice how this output suggests that the program should indeed re-prompt the user if he or she fails to cooperate with these rules (as by inputting too many days).

How to begin? Well, as before, create a new file inside of your `~/workspace/chapter1` directory (remember how?) and name it `pennies.c`. Then, fill the file with some "boilerplate" code like the below:

[source,c]
----
#include <cs50.h>
#include <stdio.h>

int main(void)
{

}
----

Save the file and, just to be safe, try compiling it with

[source,bash]
----
make pennies
----

in your terminal window, just to make sure you didn't make any syntactical mistakes, in which case you'll see errors that will need to be fixed! Then dive back into your code.

Odds are you'll want a couple of loops, one with which to prompt (and potentially re-prompt) the user for a number of days, and another with which to prompt (and potentially re-prompt) the user
for a number of first-day pennies. How to get both those numbers? Perhaps the CS50 Library offers some options? You may also find functions in the `math.h` header file that can help when working on this problem. Have a look at https://reference.cs50.net/[Reference50] to see which functions those might be. Be sure, if you use any of those functions, to place this line of code near the top of your `pennies.c` file:

[source,c]
----
#include <math.h>
----

Of course, if you store the user's amount due in an `int` (which is only 32 bits), the total will be bounded by (2^31^ - 1) pennies. (Why 2^31^ and not 2^32^? And why 1 less than 2^31^?) Best, then, to store your total in a `long long`, so that the user benefits from 64 bits. (Don't worry if users' totals overflow 64 bits and even go negative; consider it punishment for greed!)

Do take care to format the user's total as dollars and cents (to just 2 decimal places), prefixed with a dollar sign, just as we did in the output above. You do not need to insert commas after every 3 digits to the left of the decimal, as you might normally do.

So that we can automate some tests of your code, we ask that your program's last line of output be the amount owed to a user, followed by `\n`. The rest of your program's personality we leave entirely to you!

To test the correctness of your program, you may execute the below at the terminal window.

[source,bash]
----
check50 1617.chapter1.pennies pennies.c
----

And if you'd like to play with the staff's own implementation of `pennies` in CS50 IDE, you may execute the below.

[source,bash]
----
~cs50/chapter1/pennies
----

This was Pennies.
