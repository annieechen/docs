:skip-front-matter:

= Problem: Vigenère

Questions? Feel free to head to https://www.reddit.com/r/cs50[CS50 on Reddit], http://cs50.stackexchange.com[CS50 on StackExchange], or the https://www.facebook.com/groups/cs50[CS50 Facebook group].

==  Objectives

* Become better acquainted with functions and libraries.
* Take previously written code and modify it.
* Interact with command-line inputs from users.
* Dabble in cryptography.

== Recommended Reading

* Pages 11 – 14 and 39 of http://www.howstuffworks.com/c.htm.
* Chapters 6, 7, 10, 17, 19, 21, 22, 30, and 32 of _Absolute Beginner's Guide to C_.
* Chapters 7, 8, and 10 of _Programming in C_.

== Academic Honesty

This course's philosophy on academic honesty is best stated as "be reasonable." The course recognizes that interactions with classmates and others can facilitate mastery of the course's material. However, there remains a line between enlisting the help of another and submitting the work of another. This policy characterizes both sides of that line.

The essence of all work that you submit to this course must be your own. Collaboration on problems is not permitted (unless explicitly stated otherwise) except to the extent that you may ask classmates and others for help so long as that help does not reduce to another doing your work for you. Generally speaking, when asking for help, you may show your code or writing to others, but you may not view theirs, so long as you and they respect this policy's other constraints. Collaboration on quizzes and tests is not permitted at all. Collaboration on the final project is permitted to the extent prescribed by its specification.

Below are rules of thumb that (inexhaustively) characterize acts that the course considers reasonable and not reasonable. If in doubt as to whether some act is reasonable, do not commit it until you solicit and receive approval in writing from your instructor. If a violation of this policy is suspected and confirmed, your instructor reserves the right to impose local sanctions on top of any disciplinary outcome that may include an unsatisfactory or failing grade for work submitted or for the course itself.

=== Reasonable

* Communicating with classmates about problems in English (or some other spoken language).
* Discussing the course's material with others in order to understand it better.
* Helping a classmate identify a bug in his or her code, such as by viewing, compiling, or running his or her code, even on your own computer.
* Incorporating snippets of code that you find online or elsewhere into your own code, provided that those snippets are not themselves solutions to assigned problems and that you cite the snippets' origins.
* Reviewing past years' quizzes, tests, and solutions thereto.
* Sending or showing code that you've written to someone, possibly a classmate, so that he or she might help you identify and fix a bug.
* Sharing snippets of your own solutions to problems online so that others might help you identify and fix a bug or other issue.
* Turning to the web or elsewhere for instruction beyond the course's own, for references, and for solutions to technical difficulties, but not for outright solutions to problems or your own final project.
* Whiteboarding solutions to problems with others using diagrams or pseudocode but not actual code.
* Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your work for you.

=== Not Reasonable

* Accessing a solution to some problem prior to (re-)submitting your own.
* Asking a classmate to see his or her solution to a problem before (re-)submitting your own.
* Decompiling, deobfuscating, or disassembling the staff's solutions to problems.
* Failing to cite (as with comments) the origins of code, writing, or techniques that you discover outside of the course's own lessons and integrate into your own work, even while respecting this policy's other constraints.
* Giving or showing to a classmate a solution to a problem when it is he or she, and not you, who is struggling to solve it.
* Looking at another individual's work during a quiz or test.
* Paying or offering to pay an individual for work that you may submit as (part of) your own.
* Providing or making available solutions to problems to individuals who might take this course in the future.
* Searching for, soliciting, or viewing a quiz's questions or answers prior to taking the quiz.
* Searching for or soliciting outright solutions to problems online or elsewhere.
* Splitting a problem's workload with another individual and combining your work (unless explicitly authorized by the problem itself).
* Submitting (after possibly modifying) the work of another individual beyond allowed snippets.
* Submitting the same or similar work to this course that you have submitted or will submit to another.
* Using resources during a quiz beyond those explicitly allowed in the quiz's instructions.
* Viewing another's solution to a problem and basing your own solution on it.

== Assessment

Your work on this problem set will be evaluated along four axes primarily.

Scope::
 To what extent does your code implement the features required by our specification?
Correctness::
 To what extent is your code consistent with our specifications and free of bugs?
Design::
 To what extent is your code written well (i.e., clearly, efficiently, elegantly, and/or logically)?
Style::
 To what extent is your code readable (i.e., commented and indented with variables aptly named)?

To obtain a passing grade in this course, all students must ordinarily submit all assigned problems unless granted an exception in writing by the instructor.

== Starting Shortly

We'd recommend you get started by watching a few short videos; in particular, these three on functions, command-line arguments, and the Vigenère cipher. If you happen to see (and are confused by!) `char *` in these and other shorts, know for now that `char *` simply means `string`. But more on that soon!

video::Pi0Yf-jn7O8[youtube,height=540,width=960]

video::X8PmYwnbLKM[youtube,height=540,width=960]

video::9zASwVoshiM[youtube,height=540,width=960]

Be sure you're reasonably comfortable answering the below questions before moving too far!

* What's a function?
* Why bother writing functions when you can just copy and paste code as needed?
* What makes Vigenère's cipher more secure than Caesar's?
* What does `undeclared identifier` usually indicate if outputted by `make` (or, really, `clang`)?

Log into your CS50 IDE workspace and execute

[source,bash]
----
update50
----

within a terminal window to make sure your workspace is up-to-date. If you somehow closed your terminal window (and can't find it!), make sure that *Console* is checked under the *View* menu, then click the green, circled plus (+) in CS50 IDE's bottom half, then select *New Terminal*. If you need a hand, do just ask via the channels noted at the top of this specification.

Now execute

[source,bash]
----
cd ~/workspace/chapter2
----

to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.

[source,bash]
----
~/workspace/chapter2 $
----

If so, you're ready to go!

== Parlez-vous français?

If you recall, the Caesar cipher was hardly secure. Fortunately, there's a more sophisticated algorithm out there. Suffice it to say it's French, per http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher. Though do not be mislead by the article's discussion of a __tabula recta__. Each _c~i~_ can be computed with relatively simple arithmetic!  You do not need a two-dimensional array.

Vigenère's cipher improves upon Caesar's by encrypting messages using a sequence of keys (or, put another way, a keyword). In other words, if _p_ is some plaintext and _k_ is a keyword (i.e., an alphbetical string, whereby `A` and `a` represent 0, while `Z` and `z` represent 25), then each letter, _c~i~_, in the ciphertext, _c_, is computed as:

_c~i~_ = (_p~i~_ + _k~j~_) % 26

Whoa! Well... actually, that's not too different from the formula for Caesar's cipher, right? Note this cipher's use of _k~j~_ as opposed to just _k_. And recall that, if _k_ is shorter than _p_, then the letters in _k_ must be reused cyclically as many times as it takes to encrypt _p_.

Your goal for this problem is to write, in `vigenere.c`, a program that encrypts messages using Vigenère's cipher. This program must accept a single command-line argument: a keyword, _k_, composed entirely of alphabetical characters. If your program is executed without any command-line arguments, with more than one command-line argument, or with one command-line argument that contains any non-alphabetical character, your program should complain and exit immediately, with main returning `1` (thereby signifying an error that our own tests can detect). Otherwise, your program must proceed to prompt the user for a string of plaintext, _p_, which it must then encrypt according to Vigenère's cipher with _k_, ultimately printing the result and exiting, with `main` returning `0`.

As for the characters in _k_ (the keyword), you must treat `A` and `a` as 0, `B` and `b` as 1, ... , and `Z` and `z` as 25. In addition, your program must only apply Vigenère's cipher to a character in _p_ if that character is a letter. All other characters (numbers, symbols, spaces, punctuation marks, etc.) must be outputted unchanged. Moreover, if your code is about to apply the _j^th^_ character of _k_ to the _i^th^_ character of _p_, but the latter proves to be a non-alphabetical character, you must wait to apply that _j^th^_ character of _k_ to the next alphabetical character in _p_; you must not yet advance to the next character in _k_. Finally, your program must preserve the case of each letter in _p_. (Uppercase letters in _p_ must remain uppercase in the output, etc.)

Not sure where to begin?  As luck would have it, this program's pretty similar to `caesar`!  In fact, you may wish to use `caesar` as a starting point, as by way of:

[source,bash]
----
~/workspace/chapter2 $ cp caesar.c vigenere.c
----

This time though, you need to decide which character in _k_ to use as you iterate from character to character in _p_. Perhaps this could be an opportunity for you to break some of your code into __functions__, allowing you to repurpose some of what you've previously done to make the amount of work you have to do with this problem slightly less?

Here's Zamyla with some tips:

video::Uma2HZMPm2M[youtube,height=540,width=960]

It's quite likely you'll find some handy functions documented at https://reference.cs50.net/ under **ctype.h** and **stdlib.h**. For instance, `isalpha` seems promising for checking out that __k__ consists only of alphabetic characters. And, with regard to wrapping around from Z to A (or z to a) when necessary, don't forget about `%`, C's modulo operator. You might also want to check out http://asciitable.com/, which reveals the ASCII codes for more than just alphabetical characters, just in case you find yourself printing some characters accidentally.

So that we can automate some tests of your code, your program must behave per the below; highlighted in bold are some sample inputs.

[source,subs=quotes]
----
~/workspace/chapter2 [underline]#./vigenere bacon#
[underline]#Meet me at the park at eleven am#
Negh zf av huf pcfx bt gzrwep oz
----

How to test your program, besides predicting what it should output, given some input?  Well, recall that we're nice people. And so we've written a program called `devigenere` that also takes one and only one command-line argument (a keyword) but whose job is to take ciphertext as input and produce plaintext as output.

To use our program, execute

[source,bash]
----
~cs50/chapter2/devigenere k
----

at your prompt, where `k` is some keyword. Presumably you'll want to paste your program's output as input to our program; be sure, of course, to use the same key. **Note that you do not need to implement `devigenere` yourself, only `vigenere`**.

If you'd like to check the correctness of your program with `check50`, you may execute the below.

[source,bash]
----
check50 1617.chapter2.vigenere vigenere.c
----

And if you'd like to play with the staff's own implementation of `vigenere`, you may execute the below.

[source,bash]
----
~cs50/chapter2/vigenere
----

This was Vigenère.
