:skip-front-matter:

= Problem: Initials

Questions? Feel free to head to https://www.reddit.com/r/cs50[CS50 on Reddit], http://cs50.stackexchange.com[CS50 on StackExchange], or the https://www.facebook.com/groups/cs50[CS50 Facebook group].

==  Objectives

* Become better acquainted with functions and libraries.
* Become comfortable working with strings and arrays.

== Recommended Reading

* Pages 11 â€“ 14 and 39 of http://www.howstuffworks.com/c.htm.
* Chapters 6, 7, 10, 17, 19, 21, 22, 30, and 32 of _Absolute Beginner's Guide to C_.
* Chapters 7, 8, and 10 of _Programming in C_.

== Academic Honesty

This course's philosophy on academic honesty is best stated as "be reasonable." The course recognizes that interactions with classmates and others can facilitate mastery of the course's material. However, there remains a line between enlisting the help of another and submitting the work of another. This policy characterizes both sides of that line.

The essence of all work that you submit to this course must be your own. Collaboration on problems is not permitted (unless explicitly stated otherwise) except to the extent that you may ask classmates and others for help so long as that help does not reduce to another doing your work for you. Generally speaking, when asking for help, you may show your code or writing to others, but you may not view theirs, so long as you and they respect this policy's other constraints. Collaboration on quizzes and tests is not permitted at all. Collaboration on the final project is permitted to the extent prescribed by its specification.

Below are rules of thumb that (inexhaustively) characterize acts that the course considers reasonable and not reasonable. If in doubt as to whether some act is reasonable, do not commit it until you solicit and receive approval in writing from your instructor. If a violation of this policy is suspected and confirmed, your instructor reserves the right to impose local sanctions on top of any disciplinary outcome that may include an unsatisfactory or failing grade for work submitted or for the course itself.

=== Reasonable

* Communicating with classmates about problems in English (or some other spoken language).
* Discussing the course's material with others in order to understand it better.
* Helping a classmate identify a bug in his or her code, such as by viewing, compiling, or running his or her code, even on your own computer.
* Incorporating snippets of code that you find online or elsewhere into your own code, provided that those snippets are not themselves solutions to assigned problems and that you cite the snippets' origins.
* Reviewing past years' quizzes, tests, and solutions thereto.
* Sending or showing code that you've written to someone, possibly a classmate, so that he or she might help you identify and fix a bug.
* Sharing snippets of your own solutions to problems online so that others might help you identify and fix a bug or other issue.
* Turning to the web or elsewhere for instruction beyond the course's own, for references, and for solutions to technical difficulties, but not for outright solutions to problems or your own final project.
* Whiteboarding solutions to problems with others using diagrams or pseudocode but not actual code.
* Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your work for you.

=== Not Reasonable

* Accessing a solution to some problem prior to (re-)submitting your own.
* Asking a classmate to see his or her solution to a problem before (re-)submitting your own.
* Decompiling, deobfuscating, or disassembling the staff's solutions to problems.
* Failing to cite (as with comments) the origins of code, writing, or techniques that you discover outside of the course's own lessons and integrate into your own work, even while respecting this policy's other constraints.
* Giving or showing to a classmate a solution to a problem when it is he or she, and not you, who is struggling to solve it.
* Looking at another individual's work during a quiz or test.
* Paying or offering to pay an individual for work that you may submit as (part of) your own.
* Providing or making available solutions to problems to individuals who might take this course in the future.
* Searching for, soliciting, or viewing a quiz's questions or answers prior to taking the quiz.
* Searching for or soliciting outright solutions to problems online or elsewhere.
* Splitting a problem's workload with another individual and combining your work (unless explicitly authorized by the problem itself).
* Submitting (after possibly modifying) the work of another individual beyond allowed snippets.
* Submitting the same or similar work to this course that you have submitted or will submit to another.
* Using resources during a quiz beyond those explicitly allowed in the quiz's instructions.
* Viewing another's solution to a problem and basing your own solution on it.

== Assessment

Your work on this problem set will be evaluated along four axes primarily.

Scope::
 To what extent does your code implement the features required by our specification?
Correctness::
 To what extent is your code consistent with our specifications and free of bugs?
Design::
 To what extent is your code written well (i.e., clearly, efficiently, elegantly, and/or logically)?
Style::
 To what extent is your code readable (i.e., commented and indented with variables aptly named)?

To obtain a passing grade in this course, all students must ordinarily submit all assigned problems unless granted an exception in writing by the instructor.

== Getting Ready

First, curl up with the below short on loops...

video::HHmiHx7GGLE[youtube,height=540,width=960]

Next, take a self-paced tour through a few coding examples that are likely to prove quite useful to you as you work on this and some future problems in this unit, the source code for which can be found at http://cdn.cs50.net/2015/fall/lectures/2/w/src2w/:

video::BYbuuUntOZ4[youtube,height=540,width=960,list=PLhQjrBD2T380sc-fXwl1sviA-twxFduVU]

You might also find this short on arrays of interest as well!

video::7mOJN1c1JEo[youtube,height=540,width=960]

== Getting Started

Alright, here we go!

Log into your CS50 IDE workspace and execute

[source,bash]
----
update50
----

within a terminal window to make sure your workspace is up-to-date. If you somehow closed your terminal window (and can't find it!), make sure that *Console* is checked under the *View* menu, then click the green, circled plus (+) in CS50 IDE's bottom half, then select *New Terminal*. If you need a hand, do just ask via the channels noted at the top of this specification.

If you have not done so already, create a new `chapter2` directory, as with

[source,bash]
----
~/workspace/ $ mkdir chapter2
----

Keep in mind that `~` denotes your home directory, `~/workspace` denotes a directory called `workspace` therein, and `~/workspace/chapter2` denotes a directory called `chapter2` within `~/workspace`. Your prompt should now resemble the below.

[source,bash]
----
~/workspace/chapter2 $
----

If not, retrace your steps and see if you can determine where you went wrong. You can actually execute

[source,bash]
----
history
----

at the prompt to see your last several commands in chronological order if you'd like to do some sleuthing. You can also scroll through the same one line at a time by hitting your keyboard's up and down arrows; hit Enter to re-execute any command that you'd like. If still unsure how to fix, remember that the online forums are your friends!

== Initializing

Alright, let's get more comfortable with `string`.

Write, in a file called `initials.c`, a program that prompts a user for their name (using `get_string` to obtain their name as a `string`) and then outputs their initials in uppercase with no spaces or periods, followed by a newline (`\n`) and nothing more. You may assume that the user's input will contain only letters (uppercase and/or lowercase) plus single spaces between words. Folks like `Joseph Gordon-Levitt`, `Conan O'Brien`, and `David J. Malan` won't be using your program. (If only!)

Though he won't be __using__ your program, David does have a few similar programs (`capitalize-0`, `capitalize-1`, and `capitalize-2`), the walkthroughs of which may conjure up some ideas as to how to solve this particular problem. Have a look:

video::vp3TBL4WTbc[youtube,height=540,width=960,list=PLhQjrBD2T380sc-fXwl1sviA-twxFduVU]

In `capitalize-1` and `capitalize-2`, David refers to a few functions that live in the header file `ctype.h` that seem quite useful. Odds are you might be able to make use of at least https://reference.cs50.net/ctype.h/isspace[one other function] declared in that file as you work through this problem to figure out how to detect the ends of words. In fact, best to familiarize yourself with `ctype.h` generally; there's a number of very useful functions therein!

So that we can automate some tests of your code, your program must behave per the examples below. Assumed that the underlined text is what some user has typed.

[source,subs=quotes]
----
~/workspace/chapter2 $ [underline]#./initials#
[underline]#Zamyla Chan#
ZC
username@ide50:~/workspace/unit2 $ [underline]#./initials#
[underline]#robert thomas bowden#
RTB
----

If you'd like to check the correctness of your program with `check50`, you may execute the below.

[source,bash]
----
check50 1617.chapter2.initials initials.c
----

And if you'd like to play with the staff's own implementation of `initials`, you may execute the below.

[source,bash]
----
~cs50/chapter2/initials
----

This was Initials.
